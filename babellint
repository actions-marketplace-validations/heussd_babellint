#!/bin/bash
set -o errexit
set -o pipefail
set -o nounset


function print {
    echo -e "\\033[0;34m[babellint]\\033[0m $1"
}
function printerr {
    print "\\033[0;31mx $1 \\033[0m"
}
function printok {
    print "\\033[0;32m✓\\033[0m $1"
}

function fail {
    printerr "$1 via $(echo "$BASH_COMMAND" | awk '{print $1;}')"
    exit 1
}

fix=0
if [[ "${1-}" == "--fix" ]]; then
    fix=1
    shift
fi

if [ $# -eq 0 ]; then
    # No explicit file provided. List files myself and call self with each.

    GITDIR=".git"
    if [[ -e "$(pwd)/.dotfiles-bare-repo/" ]]; then
        GITDIR=".dotfiles-bare-repo"
    fi

    if [[ ! -e "$GITDIR" ]]; then
        # No git folder exists. Terminate silently
        exit 0
    fi

    FIXOPTS=""
    if [ $fix -eq 1 ];  then
        print "\\033[0;33m* Will try to fix some of the findings \\033[0m"
        FIXOPTS="--fix"
    fi
    git --git-dir="$GITDIR" ls-files | tr '\n' '\0' | xargs -I {} -0 bash -c "$0 $FIXOPTS \"{}\"" || exit 1

    printok "\\033[0;32mAll lints passed ❤️\\033[0m"
    exit
fi


for file in "$@"; do
    # In sparse repositories, some files might be listed but not exist. Skip these.
    if [[ ! -e "$file" ]]; then
        continue
    fi
    trap 'fail "$file"' ERR

    print "  $file"

    # Casing should not matter
    name=$(echo "$file" | tr '[:upper:]' '[:lower:]')
    case "$name" in
        dockerfile)
            hadolint "$file" --ignore DL3059
            ;;
        *.py)
            flake8 --extend-ignore=E501 "$file"
            ;;
        *.md)
            FIXOPTS=""
            if [ $fix -eq 1 ];  then
                FIXOPTS="--fix"
            fi
            markdownlint $FIXOPTS --config "/markdownlint.yml" "$file"
            ;;
        *.json)
            original=$(cat "$file")
            reformatted=$(jq . "$file" --sort-keys)
            if [[ "$original" != "$reformatted" ]]; then
                if [ $fix -eq 1 ];  then
                    printf "%s" "$reformatted" > "$file";
                fi
            fi
            ;;
        *.yaml)
            ;&
        *.yml)
            yamllint --no-warning -c /yamllint.config "$file"
            ;;
        *)

            mimetype=$(file --brief --mime-type "$file")
            case "$mimetype" in
                text/x-shellscript)
                    shellcheck --color=always -e SC2001 "$file"
                    ;;
                *)
                    echo -n -e '\e[1A\e[K'
                    exit 0
                    ;;
            esac
            
            ;;
    esac

    echo -n -e '\e[1A\e[K'
    printok "$file"
done

